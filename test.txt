; Файл для прогона простых тестов. Символ ; в начале строки - это строка комментария.
; После выполнившейся стоки следующая строка рассматривается как ожидаемый результат, который не подаётся навычисление.

()
()

; Базовые макросы

; Проверка quote

(' . a)
a

(' a)
(a)

(' a b c d e)
(a b c d e)

; Проверка if
(? (' . t) (' . a) ' . b)
a

(? () (' . a) ' . b)
b

; Проверка eq

(eq (' . x) (' . x))
t

(eq () ())
t

(eq (' x) (' x))
()

; Аксиомы лямбда исчисления

; бетта-редукция
((\ x x) (' . y))
y

; альфа-конверсия
(eq ((\ x x) (' . y)) ((\ z z) (' . y)))
t

; Несколько аргументов и применение)
((\ x \ y \ z x y z) (\ x \ y x y) (\ x x) (' . a))
a

; let

(>- x (' . y) x)
y

(>- f (\ x x) >- a (' . y) f a)
y

(@ f (' . x))
x

(# (' . x))
x


; Базовые функции

(car (' a))
a

(cdr (' a))
()

(cons (' . a) (' . b))
(a . b)

(cons (' a) (' b c d))
((a) b c d)

; Целые числа

1
1

(i+ 2 2)
4

(i- 2 2)
0

(i* 3 4)
12

(i/ 55 5)
11

(i+ (i* 3 4) (i* 5 6))
42

(i= 2 2)
t

; "Два не может быть больше двух!"
(i> 2 2)
()

; Проверка операций с векторами

(mkvec 3 1 2 3)
[1, 2, 3]

(vec-get (mkvec 6 1 2 3 4 5 6) 4)
5

(vec-cat (mkvec 6 1 2 3 4 5 6) (mkvec 3 3 2 1))
[1, 2, 3, 4, 5, 6, 3, 2, 1]

(vec-mid (mkvec 6 1 2 3 4 5 6) 2 4)
[3, 4]

(vec-len (mkvec 6 1 2 3 4 5 6))
6

(>- v1 (mkvec 6 1 2 3 4 5 6) >- v2 (mkvec 3 3 2 1) i= (i+ (vec-len v1) (vec-len v2)) (vec-len (vec-cat v1 v2)))
t

(>- vbegin (mkvec 4 1 2) vbegin 3 4)
[1, 2, 3, 4]

;Проверка начальной библиотеки

(list-eval (' (nil? ()) (nil? 1) (and () ()) (and () t) (and t ()) (and t t) (or () ()) (or t ()) (or () t) (or t t)))
(t () () () () t () t t t)

(listi+ (' 1 2 3 4 5 6))
21

(listi- (' 6 5 4 3 2 1))
-9

(list-map (\ x cons x nil) (' a b c d))
((a) (b) (c) (d))

; Работа с эвалуаторами

((ctx-push (cur-ctx) (' . xaxa) (' 1 2 3 4 5)) ' . xaxa)
(1 2 3 4 5)

((ctx-get (cur-ctx) (' . car)) (' a))
a

(eq (ctx-get (cur-ctx) (' . car)) ((cur-ctx) car))
t

; get-type

(eq (get-type (cur-ctx)) (get-type (ctx-push (cur-ctx) (' . x) (' . x))))
t

(eq (get-type 1) (get-type (i+ 1 2)))
t

(eq (get-type (' . x)) (get-type (' . y)))
t

(eq (get-type (cur-ctx)) (get-type (cur-ctx)))
